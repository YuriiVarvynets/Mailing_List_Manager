from django.shortcuts import renderfrom .models import Property, Queryimport csv#from django.http import HttpResponse#import loggingfrom django.contrib import messagesfrom datetime import datetime#from django.core.exceptions import ValidationError, FieldError#from django.views.decorators.csrf import ensure_csrf_cookiefrom django.views.decorators.csrf import csrf_exemptfrom django.http import JsonResponse#import threadingfrom Mail_Manager_Site.forms import SearchForm, QueryManagementFormfrom django.http import HttpResponseRedirectimport json#from django.core import serializers#from django.core.serializers.json import Serializer, DjangoJSONEncoderdef write_json(file, data):    with open(file, 'w') as outfile:        json.dump(data, outfile)def open_json():    with open('data1.json') as json_data:        data1 = json.load(json_data)  # deserialises it    json_data.close()    return data1def home_page(request):    return render(request, 'site/home.html')def import_page(request):    return render(request, 'site/import.html', {    })def select_from_df():    print("select from DB")def search_page(request):    json_data = None    query_form = None    if request.method == 'GET':        search_form = SearchForm()        print('Search GET')    elif request.method == 'POST':        print('Search POST')        search_form = SearchForm(data=request.POST)  # Bind data from request.POST into a PostForm        # A POST request: Handle Form Upload        if search_form.is_valid():            print("Valid.")            label = search_form.cleaned_data['Owner_Label_Name']            prop_addr = search_form.cleaned_data['Property_Address']            prop_city = search_form.cleaned_data['Property_City']            prop_st = search_form.cleaned_data['Property_State']            prop_type = search_form.cleaned_data['Property_Type']            mail_addr = search_form.cleaned_data['Mail_Address']            mail_city = search_form.cleaned_data['Mail_City']            mail_st = search_form.cleaned_data['Mail_State']            equity = search_form.cleaned_data['Equity']            absentee = search_form.cleaned_data['Absentee_Owned']            mail_date = search_form.cleaned_data['Last_Mail_Date']            query_limit = search_form.cleaned_data['Query_Limit']        if 'search_submit' in request.POST:            # if just one field is not empty then filter            #if label or prop_addr or prop_city or prop_st or prop_type or mail_addr or mail_city or mail_st or equity or absentee or mail_date:            p = Property.objects.all()            if label:                p = p.filter(Owner_Label_Name__contains=label)                print("Filter Owner Label Name")            if prop_addr:                p = p.filter(Property_Address__contains=prop_addr)                print("Filter Property Address")            if prop_city:                p = p.filter(Property_City__contains=prop_city)                print("Filter Property City")            if prop_st:                p = p.filter(Property_State=prop_st.upper())                print("Filter Property State")            if prop_type:                p = p.filter(Property_Type=prop_type)                print("Filter Property Type")            if mail_addr:                p = p.filter(Mail_Address__contains=mail_addr)                print("Filter Mail Address")            if mail_city:                p = p.filter(Mail_City__contains=mail_city)                print("Filter Mail_City")            if mail_st:                p = p.filter(Mail_State=mail_st.upper())                print("Filter Mail State")            if equity:                p = p.filter(Equity=equity)                print("Filter Equity")            if absentee and absentee != 'empty':                print(absentee)                p = p.filter(Absentee_Owned=str(absentee).capitalize())                print("Filter Absentee Owned")            if mail_date:                print(mail_date)                p = p.filter(Last_Mail_Date__range=["2000-01-01", mail_date])                print("Filter Last Mail Date")            if query_limit:                p = p[:query_limit]                print("Apply Query Limit")            result_query = p            json_data = json.dumps([{'Owner_Label_Name': r.Owner_Label_Name,                                     'Property_Address': r.Property_Address,                                     'Property_City': r.Property_City,                                     'Property_State': r.Property_State,                                     'Property_Type': r.Property_Type,                                     'Mail_Address': r.Mail_Address,                                     'Mail_City': r.Mail_City,                                     'Mail_State': r.Mail_State,                                     'Equity': r.Equity,                                     'Absentee_Owned': r.Absentee_Owned,                                     'Last_Mail_Date': str(r.Last_Mail_Date),                                     } for r in result_query])        if 'query_manage_submit' in request.POST:            print('query_manage_submit')            query_form = QueryManagementForm()        if 'query_save' in request.POST:            print('query_save')            query_name = "Default query name"            query_form = QueryManagementForm(request.POST)            if query_form.is_valid():                print("Valid Query.")                query_name = query_form.cleaned_data['Query_Name']            q = Query(Owner_Label_Name=label,                     Mail_Address=mail_addr,                     Mail_City=mail_city,                     Mail_State=mail_st,                     Property_Address=prop_addr,                     Property_City=prop_city,                     Property_State=prop_st,                     Property_Type=prop_type,                     Equity=equity,                     Absentee_Owned=absentee,                     Last_Mail_Date=mail_date,                     Query_Limit=query_limit,                     Query_Name=query_name)            try:                q.full_clean(validate_unique=True)                q.save()            except Exception as e:                print(e)            query_form = QueryManagementForm()            return render(request, 'site/search.html', {                'form': search_form,                'query_form': query_form,                'json_data': json_data,            })        if 'query_remove' in request.POST:            print("query_remove")            query_form = QueryManagementForm(request.POST)            if query_form.is_valid():                print("Valid - Remove")                query_id = query_form.cleaned_data['Query_List']                print("query_id: ", query_id)                try:                    Query.objects.filter(id=query_id).delete()                except Exception as e:                    print(e)                query_form = QueryManagementForm()                return render(request, 'site/search.html', {                    'form': search_form,                    'query_form': query_form,                    'json_data': json_data,                })        if 'query_load' in request.POST:            print("query_load")            query_form = QueryManagementForm(request.POST)            if query_form.is_valid():                print("Valid - Load")                query_id = query_form.cleaned_data['Query_List']                print("query_id: ", query_id)                q = Query.objects.filter(id=query_id).values()                search_form = SearchForm(initial=q[0])    return render(request, 'site/search.html', {        'form': search_form,        'query_form': query_form,        'json_data': json_data,    })@csrf_exemptdef upload_handler(request):    print("Handling uploaded file...")    content = []    # testing request    if request.method == 'POST':        print("POST")    elif request.method == 'GET':        print("GET")    else:        print("Unclear")    print(request.REQUEST)    dt = ''    try:        dt = request.POST.getlist('last_mail_date')        print("Last Mail Date: ", dt)    except Exception as e:        print(e)    if dt[0] is not '':        lmd = datetime.strptime(dt[0], "%m/%d/%Y").strftime('%Y-%m-%d')    else:        lmd = None    uploaded_files = request.FILES.getlist('file_data')    for uploaded_file in uploaded_files:        print("Processing ", uploaded_file.name)        for chunk in uploaded_file.chunks():            try:                my_file = open(uploaded_file.name, 'wb+')                my_file.write(chunk)            except Exception as e:                print(e)        try:            with open(uploaded_file.name, newline='') as csv_file:                reader = csv.reader(csv_file, delimiter=';', quotechar='|')                for row in reader:                    content.append(row)        except Exception as e:            print(e)    total_rows = 0    failed_rows = 0    success_rows = 0    already_exist_rows = 0    a = datetime.now()    for c in content:        # skip header line (should be implemented)        if c[0] == 'OWNER 1 LABEL NAME':            continue        # If the mail address + city + state + zip are different from the property address + city + state + zip YES. Else, NO.        ab = 'Yes'        if str(c[11] + c[12] + c[13] + c[14]) == str(c[19] + c[29] + c[30] + c[31]):            ab = 'No'        total_rows += 1        # id = House number . street . city . state . zip        p = Property(id=c[19] + c[29] + c[30] + c[31],                     Owner_Label_Name=c[0],                     Mail_Address=c[11],                     Mail_City=c[12],                     Mail_State=c[13],                     Mail_Zip=c[14],                     Property_Address=c[19],                     Property_City=c[29],                     Property_State=c[30],                     Property_Zip=c[31],                     Property_Type=c[36],                     Equity=c[37],                     Absentee_Owned=ab,                     Last_Mail_Date=lmd)        try:            p.full_clean(validate_unique=True)            p.save()            success_rows += 1        except Exception as e:            if 'Property with this Id already exists' in str(e):                already_exist_rows += 1            else:                print(e)                failed_rows += 1    # printing statistics    print("Total processed rows: ", total_rows)    print("Failed: ", failed_rows)    print("Success: ", success_rows)    print("The property with the same id: ", already_exist_rows)    print("Query time: ", datetime.now() - a)    # return response to input plugin    return JsonResponse({'success': 'yes'})"""def get_file(request):    print("Getting file from request...")    uploaded_files = request.FILES.getlist('file_data')    for uploaded_file in uploaded_files:        print(uploaded_file.name)    data = []    for uploaded_file in uploaded_files:        with open(uploaded_file.name, newline='') as csv_file:            reader = csv.reader(csv_file, delimiter=';', quotechar='|')            for row in reader:                data.append(row)    return data""""""d[0] - Owner_Label_Named[11] - Mail_Addressd[12] - Mail_Cityd[13] - Mail_Stated[14] - Mail_Zipd[19] - Property_Addressd[29] - Property_Cityd[30] - Property_Stated[31] - Property_Zipd[36] - Property_Typed[37] - Equity"""